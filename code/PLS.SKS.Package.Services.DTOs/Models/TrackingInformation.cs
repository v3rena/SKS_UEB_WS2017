/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TrackingInformation :  IEquatable<TrackingInformation>
    {
                /// <summary>
        /// State of the parcel.
        /// </summary>
        /// <value>State of the parcel.</value>
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum InTransportEnum for "InTransport"
            /// </summary>
            [EnumMember(Value = "InTransport")]
            InTransportEnum,
            
            /// <summary>
            /// Enum InTruckDeliveryEnum for "InTruckDelivery"
            /// </summary>
            [EnumMember(Value = "InTruckDelivery")]
            InTruckDeliveryEnum,
            
            /// <summary>
            /// Enum DeliveredEnum for "Delivered"
            /// </summary>
            [EnumMember(Value = "Delivered")]
            DeliveredEnum
        }
        /// <summary>
        /// State of the parcel.
        /// </summary>
        /// <value>State of the parcel.</value>
        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingInformation" /> class.
        /// </summary>
        /// <param name="State">State of the parcel. (required).</param>
        /// <param name="VisitedHops">Hops visited in the past - either &#x60;warehouse&#x60; or &#x60;truck&#x60;. (required).</param>
        /// <param name="FutureHops">Hops coming up in the future - their times are estimations. (required).</param>
        public TrackingInformation(StateEnum? State = default(StateEnum?), List<HopArrival> VisitedHops = default(List<HopArrival>), List<HopArrival> FutureHops = default(List<HopArrival>))
        {
            // to ensure "State" is required (not null)
            if (State == null)
            {
                throw new InvalidDataException("State is a required property for TrackingInformation and cannot be null");
            }
            else
            {
                this.State = State;
            }
            // to ensure "VisitedHops" is required (not null)
            if (VisitedHops == null)
            {
                throw new InvalidDataException("VisitedHops is a required property for TrackingInformation and cannot be null");
            }
            else
            {
                this.VisitedHops = VisitedHops;
            }
            // to ensure "FutureHops" is required (not null)
            if (FutureHops == null)
            {
                throw new InvalidDataException("FutureHops is a required property for TrackingInformation and cannot be null");
            }
            else
            {
                this.FutureHops = FutureHops;
            }
            
        }

        /// <summary>
        /// Hops visited in the past - either &#x60;warehouse&#x60; or &#x60;truck&#x60;.
        /// </summary>
        /// <value>Hops visited in the past - either &#x60;warehouse&#x60; or &#x60;truck&#x60;.</value>
        [DataMember(Name="visitedHops")]
        public List<HopArrival> VisitedHops { get; set; }
        /// <summary>
        /// Hops coming up in the future - their times are estimations.
        /// </summary>
        /// <value>Hops coming up in the future - their times are estimations.</value>
        [DataMember(Name="futureHops")]
        public List<HopArrival> FutureHops { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackingInformation {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  VisitedHops: ").Append(VisitedHops).Append("\n");
            sb.Append("  FutureHops: ").Append(FutureHops).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((TrackingInformation)obj);
        }

        /// <summary>
        /// Returns true if TrackingInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of TrackingInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackingInformation other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.VisitedHops == other.VisitedHops ||
                    this.VisitedHops != null &&
                    this.VisitedHops.SequenceEqual(other.VisitedHops)
                ) && 
                (
                    this.FutureHops == other.FutureHops ||
                    this.FutureHops != null &&
                    this.FutureHops.SequenceEqual(other.FutureHops)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                    if (this.VisitedHops != null)
                    hash = hash * 59 + this.VisitedHops.GetHashCode();
                    if (this.FutureHops != null)
                    hash = hash * 59 + this.FutureHops.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(TrackingInformation left, TrackingInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TrackingInformation left, TrackingInformation right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
