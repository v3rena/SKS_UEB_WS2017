/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Parcel :  IEquatable<Parcel>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Parcel" /> class.
        /// </summary>
        /// <param name="Weight">Weight (required).</param>
        /// <param name="Recipient">Recipient (required).</param>
        public Parcel(float? Weight, Recipient Recipient)
        {
            // to ensure "Weight" is required (not null)
            if (Weight == null)
            {
                throw new InvalidDataException("Weight is a required property for Parcel and cannot be null");
            }
            else
            {
                this.Weight = Weight;
            }
            // to ensure "Recipient" is required (not null)
            if (Recipient == null)
            {
                throw new InvalidDataException("Receipient is a required property for Parcel and cannot be null");
            }
            else
            {
                this.Recipient = Recipient;
            }
            
        }


        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight")]
        public float? Weight { get; set; }
        /// <summary>
        /// Gets or Sets Recipient
        /// </summary>
        [DataMember(Name="recipient")]
        public Recipient Recipient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Parcel {\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Parcel)obj);
        }

        /// <summary>
        /// Returns true if Parcel instances are equal
        /// </summary>
        /// <param name="other">Instance of Parcel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Parcel other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Weight == other.Weight ||
                    this.Weight != null &&
                    this.Weight.Equals(other.Weight)
                ) && 
                (
                    this.Recipient == other.Recipient ||
                    this.Recipient != null &&
                    this.Recipient.Equals(other.Recipient)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Weight != null)
                    hash = hash * 59 + this.Weight.GetHashCode();
                    if (this.Recipient != null)
                    hash = hash * 59 + this.Recipient.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Parcel left, Parcel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Parcel left, Parcel right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
