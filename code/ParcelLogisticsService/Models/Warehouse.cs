/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: knor@technikum-wien.at
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Warehouse :  IEquatable<Warehouse>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Warehouse" /> class.
        /// </summary>
        /// <param name="Code">Code (required).</param>
        /// <param name="Description">Description (required).</param>
        /// <param name="Duration">Duration (required).</param>
        /// <param name="NextHops">NextHops.</param>
        /// <param name="Trucks">Trucks.</param>
        public Warehouse(string Code = default(string), string Description = default(string), decimal? Duration = default(decimal?), List<Warehouse> NextHops = default(List<Warehouse>), List<Truck> Trucks = default(List<Truck>))
        {
            // to ensure "Code" is required (not null)
            if (Code == null)
            {
                throw new InvalidDataException("Code is a required property for Warehouse and cannot be null");
            }
            else
            {
                this.Code = Code;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for Warehouse and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "Duration" is required (not null)
            if (Duration == null)
            {
                throw new InvalidDataException("Duration is a required property for Warehouse and cannot be null");
            }
            else
            {
                this.Duration = Duration;
            }
            this.NextHops = NextHops;
            this.Trucks = Trucks;
            
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code")]
        public string Code { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration")]
        public decimal? Duration { get; set; }
        /// <summary>
        /// Gets or Sets NextHops
        /// </summary>
        [DataMember(Name="nextHops")]
        public List<Warehouse> NextHops { get; set; }
        /// <summary>
        /// Gets or Sets Trucks
        /// </summary>
        [DataMember(Name="trucks")]
        public List<Truck> Trucks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Warehouse {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  NextHops: ").Append(NextHops).Append("\n");
            sb.Append("  Trucks: ").Append(Trucks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Warehouse)obj);
        }

        /// <summary>
        /// Returns true if Warehouse instances are equal
        /// </summary>
        /// <param name="other">Instance of Warehouse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Warehouse other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Duration == other.Duration ||
                    this.Duration != null &&
                    this.Duration.Equals(other.Duration)
                ) && 
                (
                    this.NextHops == other.NextHops ||
                    this.NextHops != null &&
                    this.NextHops.SequenceEqual(other.NextHops)
                ) && 
                (
                    this.Trucks == other.Trucks ||
                    this.Trucks != null &&
                    this.Trucks.SequenceEqual(other.Trucks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                    if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                    if (this.Duration != null)
                    hash = hash * 59 + this.Duration.GetHashCode();
                    if (this.NextHops != null)
                    hash = hash * 59 + this.NextHops.GetHashCode();
                    if (this.Trucks != null)
                    hash = hash * 59 + this.Trucks.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Warehouse left, Warehouse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Warehouse left, Warehouse right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
